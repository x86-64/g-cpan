#!/usr/bin/perl

use lib 'lib';
use strict;
use warnings;

use File::Basename;
use File::Slurp;
use File::Path qw/make_path/;
use File::ShareDir qw/:ALL/;
use File::Copy;
use Template;
use Getopt::Long;
use Gentoo;
use Gentoo::CPAN::Object;
use Gentoo::Portage::Package;
use Gentoo::Portage::Overlay;
use List::MoreUtils qw/any/;

our $opt_overlay;
our $opt_preview;
our $opt_skip;

GetOptions(
    'overlay|o=s'    => \$opt_overlay,
    'preview|p'      => \$opt_preview,
    'skip|s'         => \$opt_skip,
    'help|h'         => sub { exit_usage(); }
) or exit_usage();
@ARGV or exit_usage();

our $g  = Gentoo->new;
our $tt = Template->new(RELATIVE => 1, ABSOLUTE => 1);
our $gcpan_overlay_path = $opt_overlay // $g->getEnv('GCPAN_OVERLAY')
	or die "Env variable GCPAN_OVERLAY is not defined";
our $gcpan_overlay = Gentoo::Portage::Overlay->new({
	path => $gcpan_overlay_path,
});

our @overlays = 
	grep { $_->path ne $gcpan_overlay->path }
	$g->listOverlays;

our $dist_dir = $g->getEnv('DISTDIR');

sub main {
	my (@cpan_objects) = @ARGV;
	
	foreach my $name (@cpan_objects){
		ebuild_generate($name);
	}
}

sub ebuild_generate {
	my ($name) = @_;
	
	my $c = Gentoo::CPAN::Object->new({
		parent       => $g,
		name         => $name,
	});
	
	if(
		not defined $c->cpan_info or
		not defined $c->package_name or
		not defined $c->version
	){
		warn "skipping $name: invalid cpan package name or version";
		return;
	}
	
	my $p = Gentoo::Portage::Package->from_cpan({
		parent       => $g,
		cpan_object  => $c,
	});	

	unless(defined $p->name){
		warn "skipping $name: invalid package name";
		return;
	}

	unless(defined $p->version){
		warn "skipping $name: invalid version";
		return;
	}

	my $ebuild_filepath = sprintf(
		"%s/%s",
		$gcpan_overlay->path,
		$p->ebuild_filepath,
	);
	
	unlink(sprintf("%s/.kill", dirname($ebuild_filepath)));

	if($opt_skip and -e $ebuild_filepath){
		warn "skipping $name: already exists";
		return;
	}
	
	if(any { $_->has_ebuild($p->ebuild) } @overlays){
		warn "skipping $name: exists in different overlay or main portage";
		return;
	}

	eval { $p->dependencies };
	if($@){
		warn "skipping $name: package depends on unsupported package";
		return;
	}
	
	my $template_filepath = _share_file("ebuild.tt");
	my $context = {
		c => $c,
		p => $p,
	};
	my $output = "";
	unless($tt->process($template_filepath, $context, \$output)){
		warn "template error: ".$tt->error;
		return;
	}
	
	if($opt_preview){
		printf "File: %s\n======\n%s\n======\n", $ebuild_filepath, $output;
		return;
	}
	
	make_path(dirname($ebuild_filepath));
	write_file($ebuild_filepath, $output);
	
	if(my $tarball = $c->cpan_tarball){
		copy($tarball, $dist_dir);
	}

	my $metadata_filepath = _share_file("metadata.xml");
	copy($metadata_filepath, dirname($ebuild_filepath));
	
	$g->generate_digest($ebuild_filepath);
}

sub _share_file {
	my ($file) = @_;
	return sprintf(
		"%s/%s",
		(eval { dist_dir("g-cpan") } || "share"),
		$file
	);
}

sub exit_usage {
	print STDERR qq!usage: $0 <CPAN::Module1> [<CPAN::Module2> <A/AA/AAA/Package-0.1.tar.gz> ...]
Options:
	--overlay -o            output folder
	--preview -p            show ebuild content instead of saving
	--skip                  skip if ebuild already exists
!;
	exit 1;
}

main;
